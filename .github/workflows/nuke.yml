name: Aggressive Bounty Funnel (6h)

on:
  workflow_dispatch:
    inputs:
      top_n:
        description: Top hosts to aggressively scan
        required: true
        default: "300"
      chunks:
        description: Parallel chunks for aggressive scan
        required: true
        default: "4"
      aggressive:
        description: Enable intrusive vuln templates (only if scope allows)
        required: true
        default: "false"
      httpx_threads:
        description: httpx threads
        required: true
        default: "300"
      nuclei_rate:
        description: nuclei rate-limit
        required: true
        default: "120"
      do_dirfuzz:
        description: Run a short dir fuzz (ffuf) on live hosts (true/false)
        required: true
        default: "false"

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      top_hosts_path: ${{ steps.top.outputs.path || '' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go (for PD & tools)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Check go.sum exists
        id: check_go_sum
        run: |
          if [ -f go.sum ]; then echo "exists=true" >>"$GITHUB_OUTPUT"; else echo "exists=false" >>"$GITHUB_OUTPUT"; fi

      - name: Cache Go modules (only if go.sum present)
        if: steps.check_go_sum.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install deps (Python + PD tools)
        run: |
          set -euxo pipefail
          sudo apt-get update -y || true
          sudo apt-get install -y --no-install-recommends jq curl python3 python3-pip ca-certificates git unzip gcc
          pip3 install --user python-dateutil dnspython requests

          # set absolute GOBIN at runtime (do NOT rely on job-level env)
          export GOBIN="$HOME/.local/bin"
          mkdir -p "$GOBIN"
          echo "$GOBIN" >> "$GITHUB_PATH"
          export PATH="$GOBIN:$PATH"

          # ensure go proxy for stable downloads
          go env -w GOPROXY=https://proxy.golang.org,direct

          # install PD tools (idempotent: only install if missing or force)
          if ! command -v subfinder >/dev/null 2>&1; then GOBIN="$GOBIN" go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest; fi
          if ! command -v httpx >/dev/null 2>&1; then GOBIN="$GOBIN" go install github.com/projectdiscovery/httpx/cmd/httpx@latest; fi
          if ! command -v dnsx >/dev/null 2>&1; then GOBIN="$GOBIN" go install github.com/projectdiscovery/dnsx/cmd/dnsx@latest; fi
          if ! command -v nuclei >/dev/null 2>&1; then GOBIN="$GOBIN" go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest; fi
          # ffuf optional
          if ! command -v ffuf >/dev/null 2>&1; then GOBIN="$GOBIN" go install github.com/ffuf/ffuf@latest || true; fi

          echo "Installed tools to $GOBIN"

      - name: Discovery (crt.sh + subfinder)
        id: disco
        run: |
          set -euxo pipefail
          mkdir -p tmp
          : > tmp/candidates.txt
          while read -r SEED; do
            [ -z "$SEED" ] && continue
            echo "[crt.sh] $SEED" >&2
            curl -s "https://crt.sh/?q=%25.$SEED&output=json" \
              | jq -r '.[].name_value' 2>/dev/null \
              | sed 's/\*\.//g' || true
            echo "[subfinder] $SEED" >&2
            subfinder -d "$SEED" -silent || true
          done < seeds.txt | sed 's#^https\?://##' | cut -d/ -f1 | sed 's/^www\.//' | sort -u > tmp/candidates.txt
          echo "candidates: $(wc -l < tmp/candidates.txt || echo 0)"

      - name: Enrich + score → top list
        id: top
        run: |
          set -euxo pipefail
          mkdir -p tmp/enrich
          python3 scripts/enrich_score.py tmp/candidates.txt --top "${{ github.event.inputs.top_n }}" --cap 1500 --workers 35
          echo "path=tmp/enrich/top_hosts.txt" >> $GITHUB_OUTPUT

      - name: Upload enrichment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: enrichment
          path: |
            tmp/enrich/top_hosts.txt
            tmp/enrich/top.json
            tmp/enrich/all.json

  scan:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        chunk: [1]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go (scan job)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install scan tools (httpx, nuclei, ffuf fallback)
        run: |
          set -euxo pipefail
          # set absolute GOBIN at runtime
          export GOBIN="$HOME/.local/bin"
          mkdir -p "$GOBIN"
          echo "$GOBIN" >> "$GITHUB_PATH"
          export PATH="$GOBIN:$PATH"

          # idempotent installs (install only if missing)
          command -v httpx >/dev/null 2>&1 || GOBIN="$GOBIN" go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          command -v nuclei >/dev/null 2>&1 || GOBIN="$GOBIN" go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          command -v ffuf >/dev/null 2>&1 || GOBIN="$GOBIN" go install github.com/ffuf/ffuf@latest || true

      - name: Fetch nuclei templates (robust)
        run: |
          set -euxo pipefail
          rm -rf /tmp/nuclei-templates
          ATTEMPTS=0
          until [ -d /tmp/nuclei-templates ] && [ -n "$(ls -A /tmp/nuclei-templates 2>/dev/null || true)" ] || [ $ATTEMPTS -ge 3 ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            echo "[template fetch] attempt $ATTEMPTS"
            git clone --depth 1 https://github.com/projectdiscovery/nuclei-templates /tmp/nuclei-templates && break || true
            sleep 5
          done
          if [ ! -d /tmp/nuclei-templates ] || [ -z "$(ls -A /tmp/nuclei-templates 2>/dev/null || true)" ]; then
            echo "[template fetch] git clone failed, trying zip fallback"
            curl -sL https://github.com/projectdiscovery/nuclei-templates/archive/refs/heads/master.zip -o /tmp/nuclei-templates.zip || true
            unzip -q /tmp/nuclei-templates.zip -d /tmp || true
            if [ -d /tmp/nuclei-templates-master ]; then
              mv /tmp/nuclei-templates-master /tmp/nuclei-templates || true
            fi
          fi
          if [ ! -d /tmp/nuclei-templates ] || [ -z "$(ls -A /tmp/nuclei-templates 2>/dev/null || true)" ]; then
            echo "::warning::nuclei templates not present after retries — continuing but templates missing"
          else
            nuclei -update-templates || true
            echo "[template fetch] done; templates count: $(find /tmp/nuclei-templates -type f | wc -l)"
          fi

      - name: Download top hosts
        uses: actions/download-artifact@v4
        with:
          name: enrichment
          path: tmp/enrich

      - name: Split into chunks
        id: split
        run: |
          set -euxo pipefail
          mkdir -p tmp/split
          c=${{ github.event.inputs.chunks }}
          nl=$(wc -l < tmp/enrich/top_hosts.txt || echo 0)
          [ "$nl" -eq 0 ] && { echo "::warning::No top hosts"; exit 0; }
          split -n l/$c tmp/enrich/top_hosts.txt tmp/split/part.
          echo "parts=$(ls tmp/split/part.* | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: Run scans (loop parts)
        env:
          THREADS: ${{ github.event.inputs.httpx_threads }}
          RATE: ${{ github.event.inputs.nuclei_rate }}
          AGGR: ${{ github.event.inputs.aggressive }}
          DO_DIRFUZZ: ${{ github.event.inputs.do_dirfuzz }}
        run: |
          set -euxo pipefail
          mkdir -p outputs tmp/top_live_hosts
          for p in tmp/split/part.*; do
            partname="$(basename "$p")"
            echo "=== chunk: $partname ==="
            echo "[httpx] verifying live hosts from $p"
            cat "$p" | httpx -silent -threads "${THREADS}" -timeout 8 -ports 80,443 -status-code -title -json -o outputs/httpx.$partname.jsonl || true
            if [ -s outputs/httpx.$partname.jsonl ]; then
              jq -r '.host' outputs/httpx.$partname.jsonl > tmp/top_live_hosts.$partname.txt || true
            else
              cp "$p" tmp/top_live_hosts.$partname.txt || true
            fi
            if [ "${DO_DIRFUZZ:-false}" = "true" ] && command -v ffuf >/dev/null 2>&1; then
              echo "[ffuf] quick dirfuzz on live hosts (tiny list)"
              while read -r h; do
                ffuf -w repo-wordlists/small-admin.txt -u "https://$h/FUZZ" -mc 200,301 -t 40 -o "outputs/ffuf.$h.$partname.json" || true
              done < tmp/top_live_hosts.$partname.txt || true
            fi

            TEMPLATE_ARGS="-t /tmp/nuclei-templates/takeovers -t /tmp/nuclei-templates/exposures -t /tmp/nuclei-templates/misconfiguration"
            if [ "${AGGR}" = "true" ]; then
              TEMPLATE_ARGS="$TEMPLATE_ARGS -t /tmp/nuclei-templates/vulnerabilities -t /tmp/nuclei-templates/cves"
            fi

            echo "[nuclei] running on live hosts $partname (templates: ${AGGR})"
            if [ -s tmp/top_live_hosts.$partname.txt ] && [ -d /tmp/nuclei-templates ]; then
              nuclei -l tmp/top_live_hosts.$partname.txt $TEMPLATE_ARGS -severity medium,high,critical --rate-limit "$RATE" -jsonl -o outputs/nuclei.$partname.jsonl || true
            else
              echo "no live hosts or templates missing for this chunk"
            fi
            sleep 2
          done

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: findings
          path: outputs/**
