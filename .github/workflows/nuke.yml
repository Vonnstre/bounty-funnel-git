name: Aggressive Bounty Funnel (6h)

on:
  workflow_dispatch:
    inputs:
      top_n:
        description: Top hosts to aggressively scan
        required: true
        default: "300"
      chunks:
        description: Parallel chunks for aggressive scan
        required: true
        default: "6"
      aggressive:
        description: Enable intrusive vuln templates (only if scope allows)
        required: true
        default: "false"
      httpx_threads:
        description: httpx threads
        required: true
        default: "300"
      nuclei_rate:
        description: nuclei rate-limit
        required: true
        default: "120"
      do_dirfuzz:
        description: Run a short dir fuzz (ffuf) on live hosts (true/false)
        required: true
        default: "false"
      ffuf_wordlist:
        description: Path to ffuf wordlist (kept small by default)
        required: true
        default: "repo-wordlists/small-admin.txt"

permissions:
  contents: read

env:
  # safe defaults for aggressive scans; tweak only if you know the impact
  DEFAULT_TOP_N: "300"
  DEFAULT_CHUNKS: "6"

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      top_hosts_path: ${{ steps.top.outputs.path || '' }}
    steps:
      - uses: actions/checkout@v4

      # pin a modern Go (avoid repeated auto-downloads)
      - name: Setup Go (prepare) - pin 1.24.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install deps (Python + subfinder only)
        run: |
          set -euxo pipefail

          # system packages
          sudo apt-get update -y || true
          sudo apt-get install -y --no-install-recommends jq curl python3 python3-pip ca-certificates git unzip gcc

          pip3 install --user python-dateutil dnspython requests

          # absolute GOBIN at runtime and export to next steps
          export GOBIN="$HOME/.local/bin"
          mkdir -p "$GOBIN"
          echo "$GOBIN" >> "$GITHUB_PATH"
          export PATH="$GOBIN:$PATH"

          # avoid go checksum DB and add proxy failover
          go env -w GOSUMDB=off
          go env -w GOPROXY=https://proxy.golang.org,https://goproxy.io,direct

          # install helper with exponential backoff and fallback marker
          go_install_retry() {
            pkg="$1"; tries=6; wait=3
            for i in $(seq 1 $tries); do
              echo "install attempt $i -> $pkg"
              if GOBIN="$GOBIN" go install "$pkg"; then
                echo "ok: $pkg"
                return 0
              fi
              echo "failed attempt $i for $pkg; sleeping $wait"
              sleep $wait
              wait=$((wait*2))
            done
            echo "::error::failed to install $pkg after $tries tries"
            return 1
          }

          # Only install subfinder in prepare (lighter, needed for discovery)
          command -v subfinder >/dev/null 2>&1 || go_install_retry github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest

      - name: Discovery (crt.sh + subfinder)
        id: disco
        run: |
          set -euxo pipefail
          mkdir -p tmp
          : > tmp/candidates.txt
          while read -r SEED; do
            [ -z "$SEED" ] && continue
            echo "[crt.sh] $SEED" >&2
            curl -fsS "https://crt.sh/?q=%25.$SEED&output=json" \
              | jq -r '.[].name_value' 2>/dev/null \
              | sed 's/\*\.//g' || true
            echo "[subfinder] $SEED" >&2
            subfinder -d "$SEED" -silent || true
          done < seeds.txt | sed 's#^https\?://##' | cut -d/ -f1 | sed 's/^www\.//' | sort -u > tmp/candidates.txt
          echo "candidates: $(wc -l < tmp/candidates.txt || echo 0)"

      - name: Enrich + score → top list
        id: top
        run: |
          set -euxo pipefail
          mkdir -p tmp/enrich
          python3 scripts/enrich_score.py tmp/candidates.txt --top "${{ github.event.inputs.top_n }}" --cap 1500 --workers 35
          echo "path=tmp/enrich/top_hosts.txt" >> "$GITHUB_OUTPUT"

      - name: Upload enrichment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: enrichment
          path: |
            tmp/enrich/top_hosts.txt
            tmp/enrich/top.json
            tmp/enrich/all.json

  scan:
    needs: prepare
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        chunk: [1]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go (scan job) - pin 1.24.x
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache: true

      - name: Install scan tools (httpx, nuclei, ffuf) - robust
        run: |
          set -euxo pipefail
          export GOBIN="$HOME/.local/bin"
          mkdir -p "$GOBIN"
          echo "$GOBIN" >> "$GITHUB_PATH"
          export PATH="$GOBIN:$PATH"

          # make installs tolerant of sum.golang.org and flaky proxies
          go env -w GOSUMDB=off
          go env -w GOPROXY=https://proxy.golang.org,https://goproxy.io,direct

          go_install_retry() {
            pkg="$1"; tries=6; wait=3
            for i in $(seq 1 $tries); do
              echo "install attempt $i -> $pkg"
              if GOBIN="$GOBIN" go install "$pkg"; then
                return 0
              fi
              echo "failed; sleeping $wait"
              sleep $wait
              wait=$((wait*2))
            done
            echo "::warning::go install failed for $pkg after $tries attempts"
            return 1
          }

          # primary installs (idempotent)
          command -v httpx >/dev/null 2>&1 || go_install_retry github.com/projectdiscovery/httpx/cmd/httpx@latest
          command -v nuclei >/dev/null 2>&1 || go_install_retry github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          command -v ffuf >/dev/null 2>&1 || (go_install_retry github.com/ffuf/ffuf@latest || true)

          # smoke checks (non-fatal prints)
          httpx -version || echo "httpx not available"
          nuclei -version || echo "nuclei not available"
          ffuf -version || echo "ffuf not available"

      - name: Fetch nuclei templates (robust + zip fallback)
        run: |
          set -euxo pipefail
          ulimit -n 65535 || true
          rm -rf /tmp/nuclei-templates
          for attempt in 1 2 3; do
            echo "[template fetch] attempt $attempt"
            if git clone --depth 1 https://github.com/projectdiscovery/nuclei-templates /tmp/nuclei-templates; then break; fi
            sleep $((attempt*5))
          done
          if [ ! -d /tmp/nuclei-templates ] || [ -z "$(ls -A /tmp/nuclei-templates 2>/dev/null || true)" ]; then
            echo "[template fetch] zip fallback"
            curl -fsSL https://github.com/projectdiscovery/nuclei-templates/archive/refs/heads/master.zip -o /tmp/nuclei-templates.zip || true
            unzip -q /tmp/nuclei-templates.zip -d /tmp || true
            [ -d /tmp/nuclei-templates-master ] && mv /tmp/nuclei-templates-master /tmp/nuclei-templates || true
          fi
          if [ -d /tmp/nuclei-templates ] && [ -n "$(ls -A /tmp/nuclei-templates 2>/dev/null || true)" ]; then
            echo "[template fetch] success; files: $(find /tmp/nuclei-templates -type f | wc -l)"
            nuclei -update-templates || true
          else
            echo "::warning::nuclei templates not present after retries — nuclei step will skip templates"
          fi

      - name: Download top hosts
        uses: actions/download-artifact@v4
        with:
          name: enrichment
          path: tmp/enrich

      - name: Split into chunks
        id: split
        run: |
          set -euxo pipefail
          mkdir -p tmp/split
          c=${{ github.event.inputs.chunks }}
          nl=$(wc -l < tmp/enrich/top_hosts.txt || echo 0)
          [ "$nl" -eq 0 ] && { echo "::warning::No top hosts"; exit 0; }
          split -n l/$c tmp/enrich/top_hosts.txt tmp/split/part.
          echo "parts=$(ls tmp/split/part.* | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      - name: Run scans (loop parts)
        env:
          THREADS: ${{ github.event.inputs.httpx_threads }}
          RATE: ${{ github.event.inputs.nuclei_rate }}
          AGGR: ${{ github.event.inputs.aggressive }}
          DO_DIRFUZZ: ${{ github.event.inputs.do_dirfuzz }}
          FFUF_WORDLIST: ${{ github.event.inputs.ffuf_wordlist }}
        run: |
          set -euxo pipefail
          ulimit -n 65535 || true
          mkdir -p outputs tmp/top_live_hosts
          for p in tmp/split/part.*; do
            partname="$(basename "$p")"
            echo "=== chunk: $partname ==="
            echo "[httpx] verifying live hosts from $p"
            cat "$p" | httpx -silent -threads "${THREADS}" -timeout 8 -ports 80,443 -status-code -title -json -o "outputs/httpx.$partname.jsonl" || true

            if [ -s "outputs/httpx.$partname.jsonl" ]; then
              jq -r '.host' "outputs/httpx.$partname.jsonl" > "tmp/top_live_hosts.$partname.txt" || true
            else
              cp "$p" "tmp/top_live_hosts.$partname.txt" || true
            fi

            if [ "${DO_DIRFUZZ:-false}" = "true" ] && command -v ffuf >/dev/null 2>&1; then
              echo "[ffuf] quick dirfuzz on live hosts (capped wordlist)"
              # safety: enforce capped file size to avoid >6h
              if [ -f "${FFUF_WORDLIST}" ]; then
                wc -l "${FFUF_WORDLIST}"
              else
                echo "::warning::ffuf wordlist missing; skipping ffuf"
              fi
              while read -r h; do
                ffuf -w "${FFUF_WORDLIST}" -u "https://$h/FUZZ" -mc 200,301 -t 40 -o "outputs/ffuf.$h.$partname.json" || true
              done < "tmp/top_live_hosts.$partname.txt" || true
            fi

            TEMPLATE_ARGS="-t /tmp/nuclei-templates/takeovers -t /tmp/nuclei-templates/exposures -t /tmp/nuclei-templates/misconfiguration"
            if [ "${AGGR}" = "true" ]; then
              TEMPLATE_ARGS="$TEMPLATE_ARGS -t /tmp/nuclei-templates/vulnerabilities -t /tmp/nuclei-templates/cves"
            fi

            echo "[nuclei] running on live hosts $partname (templates: ${AGGR})"
            if [ -s "tmp/top_live_hosts.$partname.txt" ] && [ -d /tmp/nuclei-templates ]; then
              nuclei -l "tmp/top_live_hosts.$partname.txt" $TEMPLATE_ARGS -severity medium,high,critical --rate-limit "$RATE" -jsonl -o "outputs/nuclei.$partname.jsonl" || true
            else
              echo "no live hosts or templates missing for this chunk"
            fi

            sleep 2
          done

      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: findings
          path: outputs/**
